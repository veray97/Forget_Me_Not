// 全局变量和状态
let quill;
let progressChart;
let progressData = {
    labels: [],
    datasets: [{
        label: '项目进度',
        data: [],
        borderColor: '#3498db',
        backgroundColor: 'rgba(52, 152, 219, 0.1)',
        tension: 0.4,
        fill: true
    }]
};

// DOM 元素
let backBtn, saveBtn, projectTitle, progressSlider, progressValue;
let reminderToggle, reminderSettings, reminderDate, reminderMusic, reminderRepeat;

// URL参数
let projectId, quadrantParam;

// 页面加载时初始化
document.addEventListener('DOMContentLoaded', () => {
    console.log('页面加载完成，开始初始化...');
    
    // 检查 Firebase 数据库是否已初始化
    if (!firebase || !firebase.database) {
        console.error('Firebase 数据库未初始化');
    } else {
        console.log('Firebase 数据库已初始化');
    }
    
    // 获取URL参数
    projectId = getUrlParameter('id');
    quadrantParam = getUrlParameter('quadrant');
    console.log('URL参数:', { projectId, quadrantParam });
    
    // 获取DOM元素引用
    initDOMReferences();
    console.log('DOM元素引用初始化完成');
    
    // 初始化Quill编辑器
    initQuillEditor();
    console.log('Quill编辑器初始化完成');
    
    // 添加保存按钮事件监听器
    saveBtn.addEventListener('click', saveProject);
    console.log('已为保存按钮添加事件监听器');

    // 检查用户是否已登录
    console.log('开始检查用户认证状态...');
    
    // 首先检查 Firebase 是否已正确初始化
    if (!firebase || !firebase.auth) {
        console.error('Firebase 未正确初始化，请检查 firebase-config.js 是否正确加载');
        alert('系统错误：Firebase 未正确初始化。请刷新页面或联系管理员。');
        return;
    }
    
    // 检查当前用户状态
    const currentUser = firebase.auth().currentUser;
    if (currentUser) {
        console.log('用户已登录（同步检查）:', currentUser.uid);
        initPage();
        return;
    }
    
    // 异步检查用户认证状态
    try {
        // onAuthStateChanged 是 Firebase 提供的方法，用于监听用户认证状态变化
        // user 参数是 Firebase 从服务器获取的当前登录用户信息
        firebase.auth().onAuthStateChanged(user => {
            if (user) {
                // user 对象存在，表示用户已登录
                console.log('用户已登录（异步检查）:', user.uid);
                // 记录用户信息，便于调试
                console.log('用户信息:', {
                    email: user.email,
                    uid: user.uid,
                    isAnonymous: user.isAnonymous,
                    emailVerified: user.emailVerified
                });
                initPage();
            } else {
                // user 为 null，表示用户未登录
                console.log('用户未登录，重定向到登录页面');
                console.log('认证状态:', firebase.auth().currentUser);
                
                // 添加延迟检查，有时 Firebase 认证状态需要时间同步
                setTimeout(() => {
                    const delayedUser = firebase.auth().currentUser;
                    if (delayedUser) {
                        console.log('延迟检查发现用户已登录:', delayedUser.uid);
                        initPage();
                        return;
                    }
                    
                    alert('请先登录后再访问此页面');
                    window.location.href = '/login.html';
                }, 1000);
            }
        });
    } catch (error) {
        console.error('认证检查异常:', error);
        alert('认证检查失败，请重新登录。错误信息: ' + (error.message || '未知错误'));
        window.location.href = '/login.html';
    }
});

// 初始化DOM元素引用
function initDOMReferences() {
    backBtn = document.getElementById('back-btn');
    saveBtn = document.getElementById('save-btn');
    projectTitle = document.getElementById('project-title');
    progressSlider = document.getElementById('progress-slider');
    progressValue = document.getElementById('progress-value');
    reminderToggle = document.getElementById('reminder-toggle');
    reminderSettings = document.getElementById('reminder-settings');
    reminderDate = document.getElementById('reminder-date');
    reminderMusic = document.getElementById('reminder-music');
    reminderRepeat = document.getElementById('reminder-repeat');
}

// 初始化Quill编辑器
function initQuillEditor() {
    quill = new Quill('#editor-container', {
        modules: {
            toolbar: [
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                ['bold', 'italic', 'underline', 'strike'],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'align': [] }],
                ['blockquote', 'code-block'],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['link', 'image', 'video'],
                ['clean']
            ]
        },
        theme: 'snow',
        placeholder: '在这里输入项目内容...'
    });
}

// 获取URL参数
function getUrlParameter(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
}

// 初始化页面
function initPage() {
    console.log('开始初始化页面...');
    console.log('参数状态:', { projectId, quadrantParam });
    
    // 根据参数决定加载已有项目或创建新项目
    if (projectId) {
        console.log('检测到项目ID，加载现有项目:', projectId);
        loadProjectData();
    } else if (quadrantParam) {
        console.log('检测到象限参数，显示创建新项目对话框');
        showInputDialog();
    } else {
        console.log('无效的参数组合，返回象限页面');
        alert('无效的项目参数，将返回象限页面');
        window.location.href = '/time-quadrant.html';
    }
    
    // 设置进度条事件
    setupProgressSlider();
    
    // 设置提醒切换事件
    setupReminderToggle();
    
    // 设置项目标题编辑功能
    setupTitleEditing();
    
    // 初始化语音输入和弹窗对话框
    initInputDialog();
}

// 设置进度条事件
function setupProgressSlider() {
    progressSlider.addEventListener('input', () => {
        progressValue.textContent = `${progressSlider.value}%`;
    });
}

// 设置提醒切换事件
function setupReminderToggle() {
    reminderToggle.addEventListener('change', () => {
        reminderSettings.style.display = reminderToggle.checked ? 'block' : 'none';
        
        // 如果开启提醒但未设置日期，则默认设置为明天这个时间
        if (reminderToggle.checked && !reminderDate.value) {
            setDefaultReminderDate();
        }
    });
}

// 设置默认提醒日期为明天
function setDefaultReminderDate() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // 格式化为 datetime-local 输入框所需的格式
    const year = tomorrow.getFullYear();
    const month = String(tomorrow.getMonth() + 1).padStart(2, '0');
    const day = String(tomorrow.getDate()).padStart(2, '0');
    const hours = String(tomorrow.getHours()).padStart(2, '0');
    const minutes = String(tomorrow.getMinutes()).padStart(2, '0');
    
    reminderDate.value = `${year}-${month}-${day}T${hours}:${minutes}`;
}

// 设置项目标题编辑功能
function setupTitleEditing() {
    projectTitle.addEventListener('click', function() {
        const input = document.createElement('input');
        input.type = 'text';
        input.value = this.textContent.trim() || this.getAttribute('placeholder');
        input.className = 'project-title-input';
        
        input.addEventListener('blur', function() {
            updateProjectTitle(this.value);
            this.replaceWith(projectTitle);
        });
        
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                updateProjectTitle(this.value);
                this.replaceWith(projectTitle);
            }
        });
        
        this.replaceWith(input);
        input.focus();
        input.select();
    });
}

// 更新项目标题
function updateProjectTitle(value) {
    if (value.trim()) {
        projectTitle.textContent = value.trim();
    } else {
        projectTitle.textContent = '';
    }
}

// 加载项目数据
function loadProjectData() {
    const userProjects = userProjectsRef();
    if (!userProjects) {
        alert('用户未登录，无法加载项目');
        window.location.href = '/login.html';
        return;
    }
    
    userProjects.child(projectId).once('value', (snapshot) => {
        const project = snapshot.val();
        if (!project) {
            alert('项目不存在，将返回象限页面');
            window.location.href = '/time-quadrant.html';
            return;
        }
        
        // 设置项目标题
        projectTitle.textContent = project.title || '';
        
        // 设置项目内容
        setProjectContent(project.content);
        
        // 设置项目进度
        const currentProgress = project.progress || 0;
        progressSlider.value = currentProgress;
        progressValue.textContent = `${currentProgress}%`;
        
        // 加载提醒设置
        loadReminderSettings(project);
        
        // 加载进度历史
        loadProgressHistory();
    });
}

// 设置项目内容
function setProjectContent(content) {
    if (!content) return;
    
    try {
        // 尝试解析JSON内容（如果是富文本）
        const contentObj = JSON.parse(content);
        quill.setContents(contentObj);
    } catch (e) {
        // 如果不是JSON，则设置为纯文本
        quill.setText(content);
    }
}

// 加载提醒设置
function loadReminderSettings(project) {
    // 重置提醒设置
    reminderToggle.checked = false;
    reminderSettings.style.display = 'none';
    reminderDate.value = '';
    reminderMusic.value = 'default';
    reminderRepeat.value = 'once';
    
    // 如果项目有提醒设置，则加载
    if (project.hasReminder) {
        reminderToggle.checked = true;
        reminderSettings.style.display = 'block';
        
        // 设置提醒日期时间
        if (project.reminderTime) {
            const reminderDateTime = new Date(project.reminderTime);
            reminderDate.value = formatDateForInput(reminderDateTime);
        }
        
        // 设置提醒音乐和重复类型
        if (project.reminderMusic) {
            reminderMusic.value = project.reminderMusic;
        }
        
        if (project.reminderRepeat) {
            reminderRepeat.value = project.reminderRepeat;
        }
    }
}

// 格式化日期为datetime-local输入框格式
function formatDateForInput(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// 加载进度历史
function loadProgressHistory() {
    console.log('尝试加载进度历史...');
    
    // 检查参数
    if (!projectId) {
        console.log('未找到项目ID，跳过加载进度历史');
        return;
    }
    
    // 检查用户是否已登录
    const user = firebase.auth().currentUser;
    
    if (!user) {
        console.log('同步检查未发现用户，尝试异步检查...');
        
        // 如果同步检查未发现用户，尝试使用异步方法
        firebase.auth().onAuthStateChanged(function(asyncUser) {
            if (asyncUser) {
                console.log('异步检查发现用户，继续加载...');
                // 找到用户后，继续加载过程
                continueLoadProgressHistory(asyncUser);
            } else {
                console.error('用户未登录，无法加载进度历史');
                // 这里不跳转，只是记录错误
            }
        });
    } else {
        // 用户已登录，直接继续
        console.log('同步检查发现用户，继续加载...');
        continueLoadProgressHistory(user);
    }
}

// 继续加载进度历史（在确认用户已登录后）
function continueLoadProgressHistory(user) {
    console.log('继续加载进度历史，用户ID:', user.uid, '项目ID:', projectId);
    
    const userProjects = firebase.database().ref(`users/${user.uid}/projects`);
    
    userProjects.child(`${projectId}/progressHistory`).once('value', (snapshot) => {
        const history = snapshot.val() || {};
        
        // 清空现有数据
        progressData.labels = [];
        progressData.datasets[0].data = [];
        
        // 按时间戳排序
        const sortedHistory = Object.entries(history)
            .sort(([timeA], [timeB]) => parseInt(timeA) - parseInt(timeB));
        
        // 填充数据
        sortedHistory.forEach(([timestamp, progress]) => {
            const date = new Date(parseInt(timestamp));
            const dateStr = formatDateForChart(date);
            
            progressData.labels.push(dateStr);
            progressData.datasets[0].data.push(progress);
        });
        
        // 如果没有历史数据，添加创建时间和初始进度
        if (sortedHistory.length === 0 && projectId) {
            addInitialProgressData(user);
        } else {
            // 更新图表
            updateChart();
        }
    }).catch(error => {
        console.error('加载进度历史失败:', error);
    });
}

// 添加初始进度数据
function addInitialProgressData(user) {
    console.log('添加初始进度数据...');
    
    const userProjects = firebase.database().ref(`users/${user.uid}/projects`);
    
    userProjects.child(projectId).once('value', (snapshot) => {
        const project = snapshot.val();
        if (project && project.timestamp) {
            const createDate = new Date(project.timestamp);
            const createDateStr = formatDateForChart(createDate);
            
            progressData.labels.push(createDateStr);
            progressData.datasets[0].data.push(project.progress || 0);
        }
        
        // 更新图表
        updateChart();
    }).catch(error => {
        console.error('加载项目数据失败:', error);
        // 即使失败也尝试更新图表
        updateChart();
    });
}

// 格式化日期为图表显示格式
function formatDateForChart(date) {
    return `${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}-${date.getFullYear()}`;
}

// 更新图表
function updateChart() {
    // 如果没有数据，添加当前日期和进度
    if (progressData.labels.length === 0) {
        const today = new Date();
        const todayStr = formatDateForChart(today);
        
        progressData.labels.push(todayStr);
        progressData.datasets[0].data.push(parseInt(progressSlider.value) || 0);
    }
    
    // 更新图表
    if (progressChart) {
        progressChart.update();
    } else {
        initChart();
    }
}

// 初始化图表
function initChart() {
    const ctx = document.getElementById('progress-chart').getContext('2d');
    progressChart = new Chart(ctx, {
        type: 'line',
        data: progressData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    title: {
                        display: true,
                        text: '进度 (%)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: '日期'
                    }
                }
            }
        }
    });
}

// 保存项目
function saveProject() {
    console.log('saveProject 函数已触发');
    
    // 检查用户是否已登录
    const user = firebase.auth().currentUser;
    
    if (!user) {
        console.log('同步检查未发现用户，尝试异步检查...');
        
        // 如果同步检查未发现用户，尝试使用异步方法
        firebase.auth().onAuthStateChanged(function(asyncUser) {
            if (asyncUser) {
                console.log('异步检查发现用户，继续保存...');
                // 找到用户后，继续保存过程
                continueProjectSave(asyncUser);
            } else {
                console.error('用户未登录，无法保存项目');
                alert('用户未登录，无法保存项目，请重新登录');
                window.location.href = '/login.html';
            }
        });
    } else {
        // 用户已登录，直接继续
        console.log('同步检查发现用户，继续保存...');
        continueProjectSave(user);
    }
}

// 继续保存项目（在确认用户已登录后）
function continueProjectSave(user) {
    console.log('继续保存项目，用户ID:', user.uid);
    
    // 获取用户特定的项目引用
    const userProjects = firebase.database().ref(`users/${user.uid}/projects`);
    
    // 获取项目数据
    const projectData = getProjectData();
    if (!projectData) {
        console.error('获取项目数据失败');
        return;
    }
    
    // 显示保存中状态
    showSavingState();
    
    // 保存到Firebase
    if (projectId) {
        // 更新现有项目
        console.log('更新现有项目:', projectId);
        userProjects.child(projectId).update(projectData)
            .then(() => {
                console.log('项目更新成功');
                restoreSaveButton();
                
                // 询问用户是否返回象限页面
                if (confirm('项目保存成功！是否返回象限页面？')) {
                    window.location.href = '/time-quadrant.html';
                } else {
                    // 重新加载进度历史
                    loadProgressHistory();
                }
            })
            .catch((error) => {
                console.error('保存项目失败:', error);
                alert('保存项目失败: ' + error.message);
                restoreSaveButton();
            });
    } else {
        // 创建新项目
        console.log('创建新项目');
        userProjects.push(projectData)
            .then((ref) => {
                console.log('新项目创建成功，ID:', ref.key);
                restoreSaveButton();
                
                // 询问用户是否返回象限页面
                if (confirm('项目创建成功！是否返回象限页面？')) {
                    window.location.href = '/time-quadrant.html';
                } else {
                    // 重定向到带有新项目ID的URL
                    window.location.href = `/project-detail.html?id=${ref.key}`;
                }
            })
            .catch((error) => {
                console.error('创建项目失败:', error);
                alert('创建项目失败: ' + error.message);
                restoreSaveButton();
            });
    }
}

// 获取项目数据
function getProjectData() {
    const content = JSON.stringify(quill.getContents());
    const progress = parseInt(progressSlider.value);
    const title = projectTitle.textContent || projectTitle.getAttribute('placeholder');
    
    // 验证标题
    if (!title.trim()) {
        alert('请输入项目标题');
        projectTitle.focus();
        return null;
    }
    
    console.log('准备保存项目:', {
        title: title,
        progress: progress,
        projectId: projectId,
        quadrantParam: quadrantParam
    });
    
    // 获取当前时间戳
    const timestamp = Date.now();
    
    // 准备更新数据
    const updates = {
        title: title,
        content: content,
        progress: progress,
        lastUpdated: timestamp
    };
    
    // 如果是从象限页面创建的新项目，添加象限信息和创建时间戳
    if (!projectId && quadrantParam) {
        updates.quadrant = quadrantParam;
        updates.timestamp = timestamp;
    }
    
    // 保存提醒设置
    if (reminderToggle.checked) {
        updates.hasReminder = true;
        
        if (reminderDate.value) {
            updates.reminderTime = new Date(reminderDate.value).getTime();
        }
        
        updates.reminderMusic = reminderMusic.value;
        updates.reminderRepeat = reminderRepeat.value;
    } else {
        updates.hasReminder = false;
    }
    
    // 创建进度历史对象
    if (!updates.progressHistory) {
        updates.progressHistory = {};
    }
    
    // 使用时间戳作为键（避免使用 / 字符）
    updates.progressHistory[timestamp.toString()] = progress;
    
    return updates;
}

// 显示保存中状态
function showSavingState() {
    saveBtn.disabled = true;
    saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';
}

// 恢复保存按钮状态
function restoreSaveButton() {
    saveBtn.disabled = false;
    saveBtn.innerHTML = '<i class="fas fa-save"></i> 保存';
}

// 显示弹窗对话框
function showInputDialog() {
    // 获取对话框元素
    const inputDialog = document.getElementById('input-dialog');
    const dialogTitle = document.getElementById('dialog-title');
    const dialogInput = document.getElementById('dialog-input');
    const dialogCancel = document.getElementById('dialog-cancel');
    const dialogSubmit = document.getElementById('dialog-submit');
    
    if (!inputDialog) {
        console.error('对话框元素未找到，无法显示对话框');
        return;
    }
    
    // 显示弹窗
    inputDialog.style.display = 'flex';
     
    // 移除旧的事件监听器（避免重复绑定）
    dialogCancel.removeEventListener('click', handleDialogCancel);
    dialogSubmit.removeEventListener('click', handleDialogSubmit);
    
    // 添加新的事件监听器
    dialogCancel.addEventListener('click', handleDialogCancel);
    dialogSubmit.addEventListener('click', handleDialogSubmit);
    
    // 取消按钮处理函数
    function handleDialogCancel() {
        inputDialog.style.display = 'none';
        // 设置默认标题和进度
        setDefaultProjectValues();
    }
    
    // 提交按钮处理函数
    function handleDialogSubmit() {
        const title = dialogTitle.value.trim();
        const content = dialogInput.value.trim();
        
        if (!title) {
            alert('请输入项目标题');
            return;
        }
        
        if (!content) {
            alert('请输入项目详情');
            return;
        }
        
        // 关闭弹窗
        inputDialog.style.display = 'none';
        
        // 设置项目内容
        quill.setText(content);
        
        // 设置项目标题
        projectTitle.textContent = title;
        
        // 设置默认进度
        progressSlider.value = 0;
        progressValue.textContent = '0%';
        
        // 初始化图表
        initChart();
    }
}

// 初始化语音输入和弹窗对话框
function initInputDialog() {
    const voiceBtn = document.getElementById('voice-btn');
    const dialogInput = document.getElementById('dialog-input');
    
    // 检查浏览器是否支持语音识别
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        setupSpeechRecognition(voiceBtn, dialogInput);
    } else {
        // 浏览器不支持语音识别
        voiceBtn.style.display = 'none';
        console.warn('当前浏览器不支持语音识别功能');
    }
}

// 设置语音识别功能
function setupSpeechRecognition(voiceBtn, dialogInput) {
    // 创建语音识别对象
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    // 设置语音识别参数
    recognition.continuous = false; // 设置为 false，每次只识别一次
    recognition.interimResults = true;
    // 设置语音识别语言，支持中文和英文
    const userLang = navigator.language || 'zh-CN';
    // 如果用户语言是英文，使用英文，否则默认使用中文
    recognition.lang = userLang.startsWith('en') ? 'en-US' : 'zh-CN';
    let isRecording = false;
    let finalTranscript = '';
    
    // 语音按钮点击事件
    voiceBtn.addEventListener('click', () => {
        toggleRecording();
    });
    
    // 切换录音状态
    function toggleRecording() {
        if (isRecording) {
            stopRecording();
        } else {
            startRecording();
        }
    }
    
    // 开始录音
    function startRecording() {
        finalTranscript = dialogInput.value; // 保存当前输入框内容
        recognition.start();
        voiceBtn.classList.add('recording');
        isRecording = true;
    }
    
    // 停止录音
    function stopRecording() {
        recognition.stop();
        voiceBtn.classList.remove('recording');
        isRecording = false;
    }
    
    // 语音识别结果事件
    recognition.onresult = (event) => {
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }
        
        // 更新输入框内容，区分最终结果和临时结果
        dialogInput.value = finalTranscript + interimTranscript;
    };
    
    // 语音识别结束事件
    recognition.onend = () => {
        voiceBtn.classList.remove('recording');
        isRecording = false;
        // 再次开始录音，实现连续录音效果
        if (isRecording) {
            setTimeout(() => {
                recognition.start();
            }, 50);
        }
    };
    
    // 语音识别错误事件
    recognition.onerror = (event) => {
        console.error('语音识别错误:', event.error);
        voiceBtn.classList.remove('recording');
        isRecording = false;
    };
}

// 语音合成（文字转语音）
// 保留但默认不使用
function speakText(text) {
    // 默认不启用语音合成
    const enableSpeech = false;
    
    if (enableSpeech && 'speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'zh-CN'; // 设置为中文
        speechSynthesis.speak(utterance);
    }
}

// 设置默认项目值
function setDefaultProjectValues() {
    // 设置默认标题
    projectTitle.textContent = '';
    
    // 设置默认进度
    progressSlider.value = 0;
    progressValue.textContent = '0%';
    
    // 初始化图表
    initChart();
}

// 调试用函数：检查Firebase连接
function debugFirebaseConnection() {
    console.log('检查Firebase连接状态');
    const user = firebase.auth().currentUser;
    
    if (user) {
        console.log('当前登录用户:', user.uid);
        
        const userProjects = userProjectsRef();
        if (userProjects) {
            console.log('用户项目引用获取成功');
            console.log('引用路径:', userProjects.toString());
            
            // 测试连接
            userProjects.limitToFirst(1).once('value')
                .then(snapshot => {
                    console.log('Firebase连接测试成功，获取到数据:', snapshot.val() !== null);
                })
                .catch(error => {
                    console.error('Firebase连接测试失败:', error);
                });
        } else {
            console.error('无法获取用户项目引用');
        }
    } else {
        console.error('用户未登录');
    }
} 